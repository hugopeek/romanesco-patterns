{
    "package": {
        "elements": {
            "snippets": [
                {
                    "name": "Time",
                    "description": "Return current timestamp.",
                    "category": "f_basic"
                },{
                    "name": "getContextSetting",
                    "description": "Retrieve a specific setting from a context of choice. A possible scenario where you might want to \"borrow\" a setting from another context, is when certain assets are only available in that context. This snippet lets you retrieve the correct site_url.",
                    "category": "f_basic"
                },{
                    "name": "getElementDescription",
                    "description": "Retrieve the description of an element of choice. Used in the front-end library to prevent having to enter the same information twice. So if you're browsing the pattern library, then yes: this paragraph is also loaded with getElementDescription!",
                    "category": "f_basic"
                },{
                    "name": "firstChildID",
                    "description": "The name says it all: retrieve the first child ID of a given ID.",
                    "category": "f_basic"
                },{
                    "name": "stripAsAlias",
                    "description": "Turn input into lowercase-hyphen-separated-alias-format and strip unwanted special characters. Useful for creating anchor links based on headings, for example.",
                    "category": "f_modifiers"
                },{
                    "name": "stripWords",
                    "description": "Opposed to the native MODX stripString modifier (which only allows you to strip a single value), stripWords lets you enter multiple (comma separated) values.",
                    "category": "f_modifiers"
                },{
                    "name": "parseTags",
                    "description": "Take in a comma separated string and turn each value into a separate tag. Sometimes you just need that :)",
                    "category": "f_modifiers"
                },{
                    "name": "textToNumber",
                    "description": "Turn a written number into an actual numeric value. In other words: turn \"three\" into \"3\". Can come in handy if you want to use the Semantic UI column width classes for other purposes.",
                    "category": "f_modifiers"
                },{
                    "name": "filterLine",
                    "description": "Search the input for lines containing a specific string. And then return those lines.",
                    "category": "f_modifiers"
                },{
                    "name": "getResourceLevel",
                    "description": "Show the level of a given resource based on the number of parent IDs. Useful for example if you only want to show a breadcrumb trail on pages that are two or three levels deep.",
                    "category": "f_resources"
                },{
                    "name": "getChildCount",
                    "description": "Return the amount of child pages a resource has. Now you can make one of those shiny little badges inside a menu button, telling the user upfront how much treasure is inside.",
                    "category": "f_resources"
                },{
                    "name": "getCrosslinks",
                    "description": "Return the IDs of all resources that link to current resource through a certain TV. Did that make sense? It means you can scan your project for other resources linked to the current one. I.e.: show relevant book reviews in blog posts and vice versa.",
                    "category": "f_resources"
                },{
                    "name": "resourceTVInputOptions",
                    "description": "Generate input option values that can be used in TVs, for creating resource selectors.",
                    "category": "f_resources"
                },{
                    "name": "resourceMediaPath",
                    "description": "Standalone version of a snippet that comes with MIGX, which generates subfolders in media sources. If you are expecting lots of images to be added inside lots of resources (say: a portfolio), resourceMediaPath will keep your folder structure tidy.",
                    "category": "f_resources"
                },{
                    "name": "jsonGetValue",
                    "description": "Get the value of a specific key from a JSON string.",
                    "category": "f_json"
                },{
                    "name": "jsonToHTML",
                    "description": "Turn a JSON object into an HTML table. For documentation purposes.",
                    "category": "f_json"
                },{
                    "name": "tvToJSON",
                    "description": "Output the properties of given TV to a JSON object. The output could be used by jsonToHTML to generate an HTML table.",
                    "category": "f_json"
                },{
                    "name": "setBoxType",
                    "description": "Output the necessary class names for Overview patterns, based on their template. It was created because the chunks where getting a bit swamped by output modifiers trying to do the same thing.",
                    "category": "f_framework"
                },{
                    "name": "setUserPlaceholders",
                    "description": "Make any extended fields that are attached to a MODX user available as placeholder.",
                    "category": "f_framework"
                },{
                    "name": "iconInputOptions",
                    "description": "Generate input options with all Semantic UI icon classes.",
                    "category": "f_framework"
                },{
                    "name": "responsiveImgSrcset",
                    "description": "Generate a number of srcset properties, for use inside an img tag.",
                    "category": "f_framework"
                },{
                    "name": "modifiedIf",
                    "description": "Customized version of the If snippet, which also accepts 'contains' and 'containsnot' operators.",
                    "category": "f_logic"
                },{
                    "name": "sliderLoadAssets",
                    "description": "Load CSS and JS dependencies for Slick slider.",
                    "category": "f_presentation"
                },{
                    "name": "statusGridLoadAssets",
                    "description": "Load JS dependencies for status grid.",
                    "category": "f_presentation"
                },{
                    "name": "tabsGenerateNav",
                    "description": "Generate the tab buttons based on data-heading attribute in the tabs themselves. It basically links every tab button to the correct tab content.",
                    "category": "f_presentation"
                },{
                    "name": "getRawTVValue",
                    "description": "Get the raw value of a TV. Usually when retrieving a TV value, it gets processed first before being returned. But sometimes you might want to get the unprocessed value instead, for instance if @inherit is being used.",
                    "category": "f_templatevars"
                },{
                    "name": "getTmplvarID",
                    "description": "Get the ID of a TV, in case you only know its name. Created for the front-end library, to help with listing included TVs.",
                    "category": "f_templatevars"
                }
            ],
            "categories": [
                {
                    "name": "f_basic",
                    "parent": "06_formulas"
                },{
                    "name": "f_modifiers",
                    "parent": "06_formulas"
                },{
                    "name": "f_resources",
                    "parent": "06_formulas"
                },{
                    "name": "f_templatevars",
                    "parent": "06_formulas"
                },{
                    "name": "f_json",
                    "parent": "06_formulas"
                },{
                    "name": "f_framework",
                    "parent": "06_formulas"
                },{
                    "name": "f_logic",
                    "parent": "06_formulas"
                },{
                    "name": "f_presentation",
                    "parent": "06_formulas"
                }
            ]
        }
    }
}